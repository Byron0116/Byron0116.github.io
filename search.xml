<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaSE | 文件和IO流 (File &amp; IO Stream)</title>
      <link href="/2023/02/23/JavaSE_03_File&amp;IOStream/"/>
      <url>/2023/02/23/JavaSE_03_File&amp;IOStream/</url>
      
        <content type="html"><![CDATA[<h1 id="文件-File"><a href="#文件-File" class="headerlink" title="文件(File)"></a>文件(File)</h1><p>Java文件类是<code>文件</code>和<code>目录路径名</code>的抽象表示(<em>‘An abstract representation of file and directory pathnames.’</em>)。<br>该类主要用于文件和目录的创建、文件的查找和文件的删除等,未涉及文件的读写。关于文件的读写将在下节IO流中介绍。<br>File对象用路径来表示。</p><ul><li>磁盘中实际存在的文件和目录(文件夹)需要用File对象表示，但是File对象代表的可能不是一个真实存在的文件或目录。</li></ul><h2 id="File类的构造方法"><a href="#File类的构造方法" class="headerlink" title="File类的构造方法"></a>File类的构造方法</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Method</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">public File(String pathname)</td><td style="text-align:left">根据文件路径创建文件对象</td></tr><tr><td style="text-align:left">public File(String parent, String child)</td><td style="text-align:left">根据父路径名的字符串和子路径名的字符串创建文件对象</td></tr><tr><td style="text-align:left">public File(File parent, String child)</td><td style="text-align:left">根据父路径对应文件对象和子路径名的字符串创建文件对象</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01FileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.String pathname</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pathname1</span> <span class="operator">=</span> <span class="string">&quot;D:\\Desktop\\test1.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathname1);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件1: &quot;</span> + file1);</span><br><span class="line">        <span class="comment">//File对象代表文件或目录,对象用路径来表示,路径可以为目录路径也可以为文件路径.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.String parent, String child</span></span><br><span class="line">        <span class="comment">/*将String类型的父级路径和子级路径进行拼接,以pathname1为例</span></span><br><span class="line"><span class="comment">          父级路径为: D:\Desktop</span></span><br><span class="line"><span class="comment">          子级路径为: test1.txt</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parent1</span> <span class="operator">=</span> <span class="string">&quot;D:\\Desktop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">child1</span> <span class="operator">=</span> <span class="string">&quot;test1.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent1, child1);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件2: &quot;</span> + file2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.File parent, String child</span></span><br><span class="line">        <span class="comment">//将File类型的父级路径和子级路径进行拼接</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">parent3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Desktop&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">child2</span> <span class="operator">=</span> <span class="string">&quot;test1.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent3, child2);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件3: &quot;</span> + file3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出<br><div class="note success flat"><p>文件1: D:\Desktop\test1.txt<br>文件2: D:\Desktop\test1.txt<br>文件3: D:\Desktop\test1.txt</p></div></p><h2 id="File类的常用成员方法"><a href="#File类的常用成员方法" class="headerlink" title="File类的常用成员方法"></a>File类的常用成员方法</h2><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><div class="table-container"><table><thead><tr><th style="text-align:left">Method</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">public boolean isFile()</td><td style="text-align:left">判断此路径名表示的File是否为文件</td></tr><tr><td style="text-align:left">public boolean isDirectory()</td><td style="text-align:left">判断此路径名表示的File是否为文件夹</td></tr><tr><td style="text-align:left">public boolean exists()</td><td style="text-align:left">判断此路径名表示的File是否存在</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02FileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Desktop\\realfile.txt&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------真实存在的文件---------&quot;</span>);</span><br><span class="line">        System.out.println(file1.isFile());</span><br><span class="line">        System.out.println(file1.isDirectory());</span><br><span class="line">        System.out.println(file1.exists());</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Desktop&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------真实存在的路径---------&quot;</span>);</span><br><span class="line">        System.out.println(file2.isFile());</span><br><span class="line">        System.out.println(file2.isDirectory());</span><br><span class="line">        System.out.println(file2.exists());</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Desktop\\unrealfile.txt&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------不存在的文件---------&quot;</span>);</span><br><span class="line">        System.out.println(file3.isFile());</span><br><span class="line">        System.out.println(file3.isDirectory());</span><br><span class="line">        System.out.println(file3.exists());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br><div class="note success flat"><p>————-真实存在的文件————-<br>true<br>false<br>true<br>————-真实存在的路径————-<br>false<br>true<br>true<br>————-不存在的文件————-<br>false<br>false<br>false</p></div></p><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><div class="table-container"><table><thead><tr><th style="text-align:left">Method</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">public long length()</td><td style="text-align:left">返回文件的大小(字节数)</td></tr><tr><td style="text-align:left">public string getAbsolutePath()</td><td style="text-align:left">返回文件的绝对路径</td></tr><tr><td style="text-align:left">public string getPath()</td><td style="text-align:left">返回定义文件时使用的路径</td></tr><tr><td style="text-align:left">public string getName()</td><td style="text-align:left">返回文件的名称，带后缀</td></tr><tr><td style="text-align:left">public long lastModified()</td><td style="text-align:left">返回文件的最后修改时间(时间毫秒值)</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03FileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;FileLearning\\realfile.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//length()方法只能返回文件的大小且单位是字节,若想返回文件夹大小则需要将文件夹中的文件大小累加.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件的大小为:&quot;</span> + file1.length() + <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的绝对路径为:&quot;</span> + file1.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的定义路径为&quot;</span> + file1.getPath());</span><br><span class="line">        <span class="comment">//getName()方法返回的文件名称包含文件名和后缀,若返回的是文件夹则为文件夹名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件的名称为:&quot;</span> + file1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的最后修改时间为&quot;</span> + file1.lastModified());</span><br><span class="line">        <span class="comment">//利用时间API可将毫秒值转换成日常时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br><div class="note success flat"><p>文件的大小为:14B<br>文件的绝对路径为:D:\Java_Learning\JavaSE_code\IdeaProjects\basic_code\FileLearning\realfile.txt<br>文件的定义路径为FileLearning\realfile.txt<br>文件的名称为:realfile.txt<br>文件的最后修改时间为1677128131305</p></div></p><h3 id="创建、删除"><a href="#创建、删除" class="headerlink" title="创建、删除"></a>创建、删除</h3><div class="table-container"><table><thead><tr><th style="text-align:left">Method</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">public boolean createNewFile()</td><td style="text-align:left">创建一个新的空文件</td></tr><tr><td style="text-align:left">public boolean mkdir()</td><td style="text-align:left">创建单级文件夹</td></tr><tr><td style="text-align:left">public boolean mkdirs()</td><td style="text-align:left">创建多级文件夹</td></tr><tr><td style="text-align:left">public boolean delete()</td><td style="text-align:left">删除文件、空文件夹</td></tr></tbody></table></div><ul><li>关于createNewFile方法：<ol><li>使用createNewFile方法时,会提示异常(IOException)。</li><li>如果文件路径不存在则能够成功创建(true)，反之创建失败(false)。</li><li>当成功创建文件之后，再执行一次createNewFile会返回false。</li><li>如果父级路径不存在，则方法会出现异常IOException。</li><li>方法创建的一定是文件，如果路径中不包含后缀名，则创建一个没有后缀的文件。</li></ol></li><li>关于mkdir方法<br>  Windows中的路径是唯一的，如果当前路径已经存在，则创建失败(false)。</li><li>关于mkdirs方法<ol><li>既可以创建多级文件夹，也可以创建单级文件夹。</li><li>既然有了mkdirs方法为何还有mkdir方法？<br> 原因：</li></ol></li><li>关于delete方法<ol><li>delete方法默认只能删除文件和空文件夹,且是直接删除,不经过回收站。</li><li>若删除的是有内容的文件夹则删除失败(false)。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A04FileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Java_Learning\\JavaSE_code\\IdeaProjects\\basic_code\\FileLearning\\createfile.txt&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次创建文件:&quot;</span> + file1.createNewFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次创建文件:&quot;</span> + file1.createNewFile());</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Java_Learning\\JavaSE_code\\IdeaProjects\\basic_code\\FileLearning\\createdir&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;创建单级文件夹：&quot;</span> + file2.mkdir());</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Java_Learning\\JavaSE_code\\IdeaProjects\\basic_code\\FileLearning\\createdir1\\createdir2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;创建多级文件夹：&quot;</span> + file3.mkdirs());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;删除文件：&quot;</span>+file1.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;删除单级文件夹：&quot;</span>+file2.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;删除多级文件夹：&quot;</span>+file3.delete());<span class="comment">//此处删除的是createdir2,还需进行一次删除。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br><div class="note success flat"><p>第一次创建文件:true<br>第二次创建文件:false<br>创建单级文件夹：true<br>创建多级文件夹：true<br>删除文件：true<br>删除单级文件夹：true<br>删除多级文件夹：true</p></div></p><h3 id="获取并遍历"><a href="#获取并遍历" class="headerlink" title="获取并遍历"></a>获取并遍历</h3><div class="table-container"><table><thead><tr><th style="text-align:left">Method</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">public File[] listFiles()</td><td style="text-align:left">获取当前路径下的所有内容(文件+文件夹)</td></tr></tbody></table></div><ul><li>关于listFiles方法<ol><li>获取当前文件夹下的所有内容(包括隐藏文件夹),把所有内容的路径放到File类型的数组中返回.</li><li>当调用者File表示的路径不存在时或为文件时,返回null.</li><li>当调用者File表示的路径是一个空文件夹时,返回长度为0的数组.</li><li>当调用者File表示的路径是需要权限才能访问的文件夹时,返回null.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A05FileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  public File[] listFiles()    获取当前路径下的所有内容(文件+文件夹)</span></span><br><span class="line">        File fine1=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\Java_Learning\\JavaSE_code\\IdeaProjects\\basic_code\\FileLearning&quot;</span>);</span><br><span class="line">        File[] files = fine1.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file:files)&#123;</span><br><span class="line">            <span class="comment">//局部变量file以此表示FileLearning文件夹下的每一个文件或文件夹</span></span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出<div class="note success flat"><p>D:\Java_Learning\JavaSE_code\IdeaProjects\basic_code\FileLearning\FileLearning.iml<br>D:\Java_Learning\JavaSE_code\IdeaProjects\basic_code\FileLearning\realfile.txt<br>D:\Java_Learning\JavaSE_code\IdeaProjects\basic_code\FileLearning\src</p></div></li></ol></li></ul><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p><strong><span class='p red'>数据流</span></strong>：是指在计算机的输入输出之间运动的数据序列。<br>输入输出是相对<code>程序</code>来说的，程序扮演两个角色：源和目的。<br>IO流是存储和读取数据的解决方案。用于读写文件中的数据(数据可以在文件中或网络中)。</p><ul><li>按流的方向分为<ol><li>输入流(InputStream)<br> 文件➡程序</li><li>输出流(OutputStream)<br> 程序➡文件</li></ol></li><li>按操作文件类型分为<ol><li>字节流<br> 可以操作所有类型的文件。</li><li>字符流<br> 只能操作纯文本文件。</li></ol></li></ul><p>IO流体系<br><img src="https://tuchuang.voooe.cn/images/2023/02/23/IOSystem.png" alt="IOSystem.png"></p><h2 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h2><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><ul><li>实现步骤<ol><li>创建FileInputStream对象(在程序和文件直接建立数据通信通道)<br> 参数是字符串表示的路径或者是File对象。<br> 如果文件不存在会创建一个新文件，但是要保证父级路径存在。<br> 如果文件已存在，则会清空文件。</li><li>写出数据(在通道中传输数据)</li><li>释放资源(关闭通道)<br> 每次使用完流后要释放资源</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       写一段文字到本地文件中</span></span><br><span class="line"><span class="comment">        1. 创建FileInputStream对象</span></span><br><span class="line"><span class="comment">        2. 写出数据</span></span><br><span class="line"><span class="comment">        3. 释放资源</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="comment">//1. 创建FileInputStream对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;IOStreamLearning\\test01.txt&quot;</span>);<span class="comment">//存在编译时异常</span></span><br><span class="line">        <span class="comment">//2. 写出数据</span></span><br><span class="line">        fos.write(<span class="number">65</span>);<span class="comment">//存在编译时异常</span></span><br><span class="line">        <span class="comment">//3. 释放资源</span></span><br><span class="line">        fos.close();<span class="comment">//存在编译时异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE | 异常处理 (Exception)</title>
      <link href="/2023/02/16/JavaSE_02_Exception/"/>
      <url>/2023/02/16/JavaSE_02_Exception/</url>
      
        <content type="html"><![CDATA[<h1 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h1><p>异常是程序在运行中由于一些特殊原因出现的<span class='p red'>错误</span>，它会中断正在执行的程序。</p><h2 id="错误的分类"><a href="#错误的分类" class="headerlink" title="错误的分类"></a>错误的分类</h2><ol><li>编译错误<br> 因为所编写的程序存在语法问题，编译系统能直接检测出来。</li><li>运行错误<br> 程序在运行的时候才会出现的错误。除了因算法逻辑错误导致的，其他运行错误还分为两大类。<ul><li>致命性的错误<br>  如Java 虚拟机产生错误、内存耗尽，系统硬件故障、动态链接失败等。这类错误应用程序无法处理。</li><li>一般性的（非致命性）错误<br>  是因编程错误或偶尔的外在因素导致的一般性问题，如：除数为零、数组越界、负数开平方，网络连接中断、读取不存在的文件等，<span class='p red'>通过某种处理后，程序还能继续运行</span>。一般所说的异常(Exception)都是指这类错误。</li></ul></li></ol><h2 id="异常类的层次及分类"><a href="#异常类的层次及分类" class="headerlink" title="异常类的层次及分类"></a>异常类的层次及分类</h2><p><img src="https://tuchuang.voooe.cn/images/2023/02/16/Exception1.png" alt="异常类的层次" title="异常类的层次"><br>所有的异常类是从 java.lang.Exception 类继承的子类。<br>Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error。<br><div class="note info flat"><p>Error 用来指示运行时<span class='p red'>环境</span>发生的错误，属于系统级别的错误。Java程序通常不捕获致命性错误Error。Error一般发生在严重故障时，它们在Java程序处理的范畴之外。一般地，程序不会从Error中恢复。</p></div><br>Exception类有两个主要的子类：RuntimeException 类 和 Checked Exception 类。也就是说异常分为两类：</p><ul><li><p>运行时异常<br>在编译阶段不会出现异常提醒，而在运行时会出现，不要求强制处理这类异常。(如:数组越界异常)<br>运行时异常包括RuntimeException类自身及它的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//运行时异常</span></span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]);<span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译时异常<br>编译阶段就会出现异常提醒的，必须强制处理这类异常否则编译不通过。(如:日期解析异常)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//编译时异常</span></span><br><span class="line">        String time=<span class="string">&quot;2030年1月1日&quot;</span>;</span><br><span class="line">        SimpleDateFormat sdf=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        Date date=sdf.parse(time);<span class="comment">//若未处理异常则会报错 Unhandled exception: java.text.ParseException</span></span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h2><ol><li>用来查询Bug的关键参考信息。</li><li>可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况。</li></ol><h1 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h1><p>可分为 JVM默认的处理方式、捕获异常(自己处理)、抛出异常(交给调用者)。</p><h2 id="JVM默认的处理方式"><a href="#JVM默认的处理方式" class="headerlink" title="JVM默认的处理方式"></a>JVM默认的处理方式</h2><p>把异常的名称，异常原因及异常出现的位置等信息输出在了控制台，以红色字体显示。<br>程序停止执行，在异常下面的代码不会再执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常之上的代码正常运行&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发生了异常&quot;</span>+<span class="number">2</span>/<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;异常之下的代码正常运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><div class="note danger flat"><p>异常之上的代码正常运行<br>Exception in thread “main” java.lang.ArithmeticException: / by zero<br>    at com.learning.A01ExceptionDemo.ExceptionDemo3.main(ExceptionDemo3.java:11)</p></div></p><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>格式如下：<br><div class="note flat"><p><span class='p blue'>try</span>{<br>    可能出现异常的代码;<br>} <span class='p blue'>catch</span>(异常类名 变量名){<br>    处理异常的代码;<br>}</p></div><br>目的:当代码出现异常时，让程序继续往下执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可能出现异常的代码</span></span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果此处出现异常，程序就会在这里创建一个该异常的对象</span></span><br><span class="line"><span class="comment">            new ArrayIndexOutOfBoundsException();</span></span><br><span class="line"><span class="comment">            拿着这个对象到catch的小括号中对比，看括号中的变量e是否可以接收这个对象</span></span><br><span class="line"><span class="comment">            如果能被接收，就表示该异常就被捕获，执行catch里面对应的代码</span></span><br><span class="line"><span class="comment">            当catch里面所有的代码执行完毕，继续执行try...catch体系下面的其他代码</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            <span class="comment">//出现了ArrayIndexOutOfBoundsException,我该如何处理</span></span><br><span class="line">            System.out.println(<span class="string">&quot;索引越界!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;捕获异常成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><div class="note success flat"><p>索引越界!<br>捕获异常成功!</p></div></p><ul><li><strong><em><span class='p green'>4 Questions for try...catch</span></em></strong><ol><li>如果try中没有遇到问题，怎么执行？<br> <code>会将try中所有的代码执行完毕，不会执行catch中的代码。</code></li><li>如果try中可能会遇到多个问题，怎么执行？<br> <code>写多个catch与之对应，但是发生异常时，将跳过try块中异常点后面的语句，且异常处理需要更多的时间和资源。因此，应当仔细分析代码，尽量缩减try代码块。并将子类异常的catch块放在前面，父类异常的catch块放在后面。</code><br> 从JDK7开始多个异常可以写在一个catch 中，它们之间用竖线隔开。表示出现了不同异常采用同一种处理方案。<code>但需要注意，用&quot; | &quot;操作符合并的异常不要出现互为父子的关系。</code></li><li>如果try中遇到的问题没有被捕获，怎么执行？<br> <code>相当于try...catch代码白写了，最终会交给JVM进行默认的处理。</code></li><li>如果try中遇到了问题，那么try下面的其他代码还会执行吗？<br> <code>不会执行，直接去找对应异常的catch，执行catch中的代码。如果没有捕获对应异常的catch则交给JVM处理。</code></li></ol></li></ul><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>检测到错误的程序可以创建一个合适的异常对象并抛出它，这就称为抛出一个异常。<br>在抛出异常中有两个关键字<code>throw</code>和<code>throws</code></p><ul><li><strong><span class='p red'>throws</span></strong><br>  写在方法定义处，表示声明一个异常。告诉调用者使用本方法可能会有哪些异常。<br>  格式如下：  <div class="note flat"><p>public void 方法名() throws 异常类名1,异常类名2…{<br>    …<br>}</p></div>  注意：  <div class="note danger flat"><p>编译时异常(Checked Exception)：必须要在方法之后通过throws声明此类异常。<br>运行时异常(Runtime Exception)：可以不声明。</p></div></li><li><strong><span class='p red'>throw</span></strong><br>  写在方法内，结束方法并手动抛出异常对象，交给调用者。<br>  方法中抛出异常下方的代码不再执行。<br>  格式如下：  <div class="note flat"><p>public void 方法名(){<br>    throw new 异常类名();<br>    //如throw new NullPointerException();<br>}</p></div></li></ul><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><ol><li>定义异常类</li><li>写继承关系</li><li>空参构造</li><li>带参构造<br>格式如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameFormatException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="comment">//NameFormat：当前异常的名字</span></span><br><span class="line">    <span class="comment">//Exception：表示当前类是一个异常类</span></span><br><span class="line">    <span class="comment">//extends：继承自RuntimeException,适用于运行时异常</span></span><br><span class="line">    <span class="comment">//如果是编译时异常则要继承Exception类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameFormatException</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//空参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameFormatException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="comment">//带参构造</span></span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE | 面向对象 (Object Oriented)</title>
      <link href="/2022/12/13/JavaSE_01_OOP/"/>
      <url>/2022/12/13/JavaSE_01_OOP/</url>
      
        <content type="html"><![CDATA[<h1 id="类与对象-class-and-object"><a href="#类与对象-class-and-object" class="headerlink" title="类与对象 ( class and object )"></a>类与对象 ( class and object )</h1><ul><li><strong><span class='p cyan'>类</span></strong><br>类是构造对象的模板或蓝图，它描述一类对象的<span class='p red'>属性</span>(状态)和<span class='p red'>行为</span>。<br>由类<code>构造(construct)</code>对象的过程称为创建类的<code>实例 (instance)</code>。</li><li><strong><span class='p cyan'>对象</span></strong><br>对象是类的一个<span class='p red'>实例</span>，有属性和行为。<br>例如，一位学生是一个对象，它的属性有：姓名、学号、班级等；行为有：学习等。</li></ul><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名 &#123;</span><br><span class="line">   <span class="comment">// 1.成员变量（属性）</span></span><br><span class="line">   <span class="comment">// 2.成员方法 (行为) </span></span><br><span class="line">   <span class="comment">// 3.构造方法</span></span><br><span class="line">   <span class="comment">// 4.代码块</span></span><br><span class="line">   <span class="comment">// 5.内部类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Example</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;<span class="comment">//类名使用 UpperCamelCase 风格，必须遵从驼峰形式</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong><span class='p red'>注意事项</span></strong><ol><li>类名使用 <code>UpperCamelCase</code> 风格，必须遵从驼峰形式</li><li>一个Java文件中可以定义多个class类，且<code>只能一个类是public修饰</code>，而且public修饰的类名<code>必须成为代码文件名</code>。<span class='p red'>(实际开发中建议一个文件定义一个class类)</span></li><li>成员变量的完整定义格式是：<code>修饰符 数据类型 变量名称 = 初始化值</code> ；一般无需指定初始化值，存在默认值。</li></ol></li></ul><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>在Java中，使用关键字 <code>new</code> 来创建一个新的对象。创建对象需要以下三步：  </p><ol><li>声明：声明一个对象，包括对象名称和对象类型(即 类名)。</li><li>实例化：使用关键字 <code>new</code> 来创建一个对象。</li><li>初始化：使用 new 创建对象时，会调用构造方法初始化对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  类名 对象名 = new 类名();</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure><h1 id="封装-Encapsulation"><a href="#封装-Encapsulation" class="headerlink" title="封装 (Encapsulation)"></a>封装 (Encapsulation)</h1><p>封装，即<code>隐藏 对象的属性 和 实现细节</code>，仅对外公开接口，控制在程序中属性的读和修改的访问级别；将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体，也就是将数据与操作数据的源代码进行有机的结合，形成 “<span class='p red'>类</span>“。<br>封装可以被认为是一个<code>保护屏障</code>，防止该类的代码和数据被外部类定义的代码随机访问。<br>要访问该类的代码和数据，必须通过<code>严格的接口控制</code>。<br>封装最主要的功能在于我们能修改自己的实现代码，而<code>不用修改那些调用我们代码的程序片段</code>。<br>适当的封装可以让程式码更容易理解与维护，也加强了程式码的<code>安全性</code>。</p><h2 id="封装的优点"><a href="#封装的优点" class="headerlink" title="封装的优点"></a>封装的优点</h2><ol><li>良好的封装能够<code>减少耦合</code>。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节。</li></ol><h2 id="封装的步骤"><a href="#封装的步骤" class="headerlink" title="封装的步骤"></a>封装的步骤</h2><ol><li><p>修改属性的可见性( 通过指定<code>访问控制修饰符</code>来限制对属性的访问（一般限制为private）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对每个值属性提供<code>对外的公共方法</code>访问，也就是创建一对<code>赋取值方法( getter和setter方法)</code>，<span class='p red'>用于对私有属性的访问</span>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="访问控制修饰符-Access-modifier"><a href="#访问控制修饰符-Access-modifier" class="headerlink" title="访问控制修饰符(Access modifier)"></a>访问控制修饰符(Access modifier)</h2><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li>default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：<code>类、接口、变量、方法</code>。</li><li><strong>private</strong> : 在同一类内可见。使用对象：<code>变量、方法</code>。 注意：不能修饰类（外部类）。</li><li><strong>public</strong> : 对所有类可见。使用对象：<code>类、接口、变量、方法</code>。</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：<code>变量、方法</code>。 注意：不能修饰类（外部类）。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">本类</th><th style="text-align:center">同一包内的类</th><th style="text-align:center">子类(同一包)</th><th style="text-align:center">子类(不同包)</th><th style="text-align:center">其他包</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√/×(<a href="#protected">说明</a>)</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">provite</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table></div><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><ul><li><strong>子类与父类在同一包中</strong>：被声明为 protected 的变量、方法和构造方法能被同一个包中的任何其他类访问。</li><li><strong>子类与父类不在同一包中</strong>：那么在子类中，子类实例可以访问其从父类继承而来的 protected 方法，而不能访问父类实例的protected方法。</li></ul><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><p>构造方法又称构造器。  </p><ul><li><span class='p red'>作用</span>：<code>在创建对象时</code>给成员变量赋值。  </li><li><span class='p red'>特点</span>：<ol><li>方法名与类名<code>完全相同</code>。</li><li><code>没有</code>返回值类型,但是有修饰符。</li><li><code>没有</code>具体的返回值(无return)。</li></ol></li><li><strong><span class='p red'>注意事项</span></strong><ol><li>构造方法的定义<ul><li>如果没有定义构造方法, 编译器将给出一个<code>默认</code>的无参构造方法。</li><li>如果定义了构造方法,无论有无参,系统将不再提供默认的构造方法(如果只写有参,创建对象时若想调用无参会报错)。</li></ul></li><li>推荐的使用方式<ul><li>手动书写无参和带全部参数的构造方法。</li></ul></li></ol></li></ul><h2 id="空参构造"><a href="#空参构造" class="headerlink" title="空参构造"></a>空参构造</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        age = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带参构造"><a href="#带参构造" class="headerlink" title="带参构造"></a>带参构造</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><p>JavaBean是一种标准，是一种常规的类。<br>JavaBeans的“beans”是将一个或多个对象封装为单个标准化对象（bean）的类。</p><ul><li><span class='p red'>特点</span>：<ol><li>成员变量使用<code>private</code>修饰。</li><li>至少提供无参和带全部参数的构造方法。</li><li>提供每一个成员变量对应的getter和setter方法。</li></ol></li></ul><h2 id="快捷生成JavaBean"><a href="#快捷生成JavaBean" class="headerlink" title="快捷生成JavaBean"></a>快捷生成JavaBean</h2><ol><li><kbd>alt</kbd> + <kbd>Insert</kbd>  <ul><li>选择Constructor，再选择Select None，最后确定，生成了无参构造方法。</li><li>选择Constructor，再<kbd>Ctrl</kbd> + <kbd>A</kbd> ，最后确定，生成了带全部参数的构造方法。</li><li>选择Getters and Setters，再<kbd>Ctrl</kbd> + <kbd>A</kbd> ，最后确定，生成了所有成员变量对应的getter和setter方法。</li></ul></li><li><p>Ptg<br>idea安装Ptg插件后，在类体中单击右键，选择Ptg to JavaBean(或者快捷键<kbd>Ctrl</kbd> + <kbd>Shift</kbd>+ <kbd>,</kbd>)，即可一键生成JavaBean。</p></li></ol><h1 id="包-Package"><a href="#包-Package" class="headerlink" title="包(Package)"></a>包(Package)</h1><p><strong><span class='p red'>包就是文件夹。用来管理各种不同功能的Java类，方便后期代码维护。</span></strong></p><h2 id="包名的规则："><a href="#包名的规则：" class="headerlink" title="包名的规则："></a>包名的规则：</h2><p>公司域名反写+包的作用，需要全部英文小写，见名知意。<br><div class="tip info"><p>如公司域名为 公司名.com 则包名为 com.公司名<br>如 com.xxx.domain 其中domain表示这个包放一些JavaBean类</p></div></p><h2 id="使用其它类的规则"><a href="#使用其它类的规则" class="headerlink" title="使用其它类的规则"></a>使用其它类的规则</h2><ol><li>使用同一个包中的类时，不需要导包。—-导包即import</li><li>使用java.lang包中的类时，不需要导包。</li><li>其他情况都需要导包。</li><li>如果同时使用两个包中的同名类，需要用全类名—-<code>全类名=包名+类名</code>。</li></ol><h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><p>this是<code>指向对象本身的一个指针</code>。  </p><h1 id="Static修饰符"><a href="#Static修饰符" class="headerlink" title="Static修饰符"></a>Static修饰符</h1><p>修饰符static表示静态,可以修饰<span class='p red'>成员变量</span>和<span class='p red'>成员方法</span></p><h2 id="静态变量与静态方法"><a href="#静态变量与静态方法" class="headerlink" title="静态变量与静态方法"></a>静态变量与静态方法</h2><ul><li><span class='p cyan'>静态变量</span>（被static修饰的成员变量）<br>特点:独立于对象,属于类。被<span class='p blue'>该类</span><span class='p red'>所有对象</span>共享(所有对象的此属性的值都相同)，无论一个类实例化多少对象，它的静态变量只有一份拷贝。  </li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">调用方式</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center"><span class='p red'>类名调用(推荐)</span></td><td style="text-align:center"><strong><code>类名.静态变量名 = 要赋的值</code></strong></td></tr><tr><td style="text-align:center">对象名调用</td><td style="text-align:center"><code>对象名.静态变量名 = 要赋的值</code></td></tr></tbody></table></div><div class="note warning flat"><p>无法在方法中定义静态局部变量。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> string teacherName;<span class="comment">//静态变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><span class='p cyan'>静态方法</span>（被static修饰的成员方法）<br>特点:多用在测试类和工具类中,在JavaBean类中较少使用</p></li><li><p><strong><span class='p red'>注意事项</span></strong></p><ol><li>静态方法只能访问静态变量和静态方法</li><li>非静态方法可以访问 静态或非静态 的 变量或方法</li><li>静态方法中没有this关键字</li></ol></li></ul><h2 id="static内存分布"><a href="#static内存分布" class="headerlink" title="static内存分布"></a>static内存分布</h2><ul><li><strong><span class='p red'>静态区</span></strong><br>位于堆中,存储类中所有的静态变量<br>特点:随着类的加载而加载,比对象先一步加载到堆中,并且一个静态变量在静态区中只有一个。</li></ul><h1 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h1><p>final可以修饰 方法、类、变量。<br>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p><ul><li>final方法:<br>  表明该方法是最终方法，可以被继承 但 <code>不能被重写</code>。</li><li>final类：<br>  表明该类是最终类，不能被继承。</li><li>final变量：<br>  即 <span class='nota' data-nota='常量命名规则 单个单词：全部大写；多个单词：全部大写，单词之间用下划线隔开。'>常量</span>。只能被赋值一次，一旦赋值后不能被重新赋值。<br>  被 final 修饰的实例变量必须显式指定初始值。</li></ul><div class="tip info"><p>final修饰的变量是基本类型：那么变量存储的 <strong><span class='p red'>数据值</span></strong> 不能发生改变。<br>final修饰的变量是引用类型：那么变量存储的 <strong><span class='p red'>地址值</span></strong> 不能发生改变，对象内部的可以改变。</p></div> <h1 id="继承-Extend"><a href="#继承-Extend" class="headerlink" title="继承(Extend)"></a>继承(Extend)</h1><p>Java中用<strong><code>extends</code></strong>这个关键字来进行继承。</p><ul><li><span class='p red'>Java继承特点</span>：<ol><li>只支持<code>单继承</code>:一个子类只能继承一个父类。</li><li>不支持多继承:子类不能同时继承多个父类。<br>Java中仅仅支持单一继承，同时Java采用Interface(接口)<span class='p red'>变相实现</span>多重继承而避免父类二义性</li><li>支持多重继承:即A继承于B,B继承于C。</li><li>子类只能访问父类中<code>非私有</code>的成员。</li><li>Java中每个类都直接或间接继承于<code>Object</code>。</li></ol></li></ul><div class="note default simple"><p>即使不写extends，JVM也会加一个默认的继承关系<br>如public class ExtendsDemo1{}等价于public class ExtendsDemo1 extends Object{}</p></div><h2 id="继承内容"><a href="#继承内容" class="headerlink" title="继承内容"></a>继承内容</h2><ol><li>父类的<code>构造方法</code>无论为public还是private，子类都<code>无法继承</code>。<ul><li>原因:即使继承下来了,其构造函数名也和子类的类名不同，不能称为构造函数。</li></ul></li><li>父类的<code>成员变量</code>无论为public还是private，子类<code>都可以继承</code>。<ul><li>但是为private时，子类无法直接调用父类的私有成员变量。</li></ul></li><li>父类的<code>成员方法</code>，public能继承，private不能继承。<ul><li>类的底层有一个 <code>虚方法表</code>：用来存储 非private、非static、非final的成员方法。并且将虚方法表继承给子类，子类在这张表中加入满足条件的成员方法形成新的虚方法表，继续继承给自己的子类。</li></ul></li></ol><h2 id="成员变量访问特点"><a href="#成员变量访问特点" class="headerlink" title="成员变量访问特点"></a>成员变量访问特点</h2><ol><li><strong><span class='p red'>就近原则</span></strong><br>成员方法调用最近的成员变量。先在局部位置找，然后在本类成员位置找，最后在父类成员位置找，逐级往上。</li><li>super关键字<br>super代表父类，并且最多只能调用一次，不能写成super.super.成员变量。</li><li>出现重名的成员变量<br>name、this.name、super.name</li></ol><h2 id="成员方法的访问特点"><a href="#成员方法的访问特点" class="headerlink" title="成员方法的访问特点"></a>成员方法的访问特点</h2><ol><li><strong><span class='p red'>就近原则</span></strong></li><li>super关键字</li><li>方法重写<br>父类的方法不能满足子类的需求时,进行方法重写。<br>子类中出现的与父类一模一样的方法声明,此方法为重写的方法。<br><strong><span class='p red'>@Override</span></strong>  进行方法重写的注释<br>本质:覆盖虚方法表中的方法<ul><li><strong><span class='p red'>注意事项</span></strong></li></ul><ol><li>重写方法的名称、形参列表必须与父类中的一致。</li><li>子类重写父类方法时，访问权限子类必须大于等于父类。</li><li>子类重写父类方法时，返回值类型子类必须小于等于父类。</li><li>私有和静态方法不能被重写。</li><li>只有被添加到虚方法表中的方法才能被重写。</li></ol></li></ol><h2 id="构造方法访问特点"><a href="#构造方法访问特点" class="headerlink" title="构造方法访问特点"></a>构造方法访问特点</h2><ol><li>父类中的构造方法不会被子类继承,但可以通过super调用。</li><li>子类中所有的构造方法默认先访问父类中的无参构造，再执行自己。<ul><li>原因<br>子类在初始化的时候,有可能会使用到父类中的数据,如果父类没有完成初始化,子类将无法使用父类的数据。<br>子类初始化之前,一定要调用父类构造方法先完成父类数据空间的初始化。</li><li>如何调用父类构造方法?<br>子类构造方法第一行语句默认都是super(),不写JVM也会帮你写上,但是必须在方法中的第一行<br>如果想调用父类有参构造，必须手动写super进行调用</li></ul></li></ol><h1 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态(Polymorphism)"></a>多态(Polymorphism)</h1><p>多态表示同类型的对象,表现出不同的形态。</p><ul><li>表现形式<br>  <strong><code>父类类型 对象名称 = 子类对象</code></strong><br>  如Person P = new Student();//其中Student继承于Person</li><li>多态的前提<ol><li>有继承关系</li><li>有<code>父类引用</code>指向<code>子类对象</code></li><li>有方法重写</li></ol></li><li>好处<br>  使用父类型作为参数,可以接收所有子类对象。</li></ul><h2 id="多态调用成员的特点"><a href="#多态调用成员的特点" class="headerlink" title="多态调用成员的特点"></a>多态调用成员的特点</h2><ul><li>变量调用<br>  编译看左边,运行看左边</li><li>成员调用<br>  编译看左边,运行看右边</li></ul><h2 id="多态的优势和弊端"><a href="#多态的优势和弊端" class="headerlink" title="多态的优势和弊端"></a>多态的优势和弊端</h2><ul><li>优势<ol><li>在多态形势下,右边对象可以实现解耦合,便于扩展和维护<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">p.work<span class="comment">//业务逻辑发生改变时,后续代码无需修改,比如让老师去工作只需将右侧改为new Teacher即可</span></span><br></pre></td></tr></table></figure></li><li>定义方法时,使用父类型作为参数,可以接收所有子类对象,体现多态的扩展性与便利。</li></ol></li><li>弊端<ol><li>不能调用子类的成员方法<br><span class='p red'>解决方案</span>: 将父类型强转成子类型并赋值给子类型的引用。<br> 可以先判断父类型指向的实例是否为对应子类型<br> instanceof 是 Java 的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</li></ol></li></ul><h1 id="抽象类和抽象方法-Abstract"><a href="#抽象类和抽象方法-Abstract" class="headerlink" title="抽象类和抽象方法(Abstract)"></a>抽象类和抽象方法(Abstract)</h1><p>在class或方法的<code>返回类型前</code>加上abstract得到抽象类或抽象方法。<br>抽取共性方法时，无法确定方法体就可以把方法定义为抽象的，并强制子类按照某种格式进行重写。</p><ol><li>抽象类 <span class='p red'>不能被实例化</span> 。如果被实例化，就会报错，编译无法通过。<br> 只有抽象类的非抽象子类可以创建对象。</li><li>抽象类中不一定包含抽象方法，但是<span class='p red'>有抽象方法的类必定是抽象类</span>。</li><li>抽象类中的抽象方法只是声明，不包含方法体，就是<span class='p red'>不给出</span>方法的具体实现、具体功能。</li><li>抽象类中的构造方法、类方法（用 static 修饰的方法）不能声明为抽象方法。<br> 由于子类会继承父类的属性，构造方法用于子类创建对象时给属性赋值。</li><li>抽象类的子类必须给出抽象类中所有的抽象方法的具体实现，除非该子类也是抽象类。</li></ol><h1 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h1><p>接口在JAVA中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。</p><ul><li>接口的定义和使用:<ol><li>接口用关键字interface来定义 如public interface 接口名{}</li><li><strong><span class='p red'>接口不能实例化</span></strong></li><li>接口和类之间是<span class='p red'>实现关系</span>，通过implements关键字表示。<br>如public class 类名 implements 接口名1，接口名2..{}//可以实现单或多接口<br>如public class 类名 extends 父类 implements 接口名1，接口名2..{}//实现类可以在继承的同时实现多个接口</li><li>接口的子类(实现类)<br>子类要么重写接口中所有的抽象方法,要么本身为抽象类。<br>如果子类实现了多个接口，并且接口与接口之间有同名的方法，只需重写一次。</li></ol></li></ul><h2 id="接口与类的区别"><a href="#接口与类的区别" class="headerlink" title="接口与类的区别"></a>接口与类的区别</h2><ol><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</li><li>接口不能包含成员变量，除了 static 和 final 变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多继承,类只能单继承。</li></ol><h2 id="接口的特性"><a href="#接口的特性" class="headerlink" title="接口的特性"></a>接口的特性</h2><ul><li><strong>成员变量</strong><br>  默认修饰符(隐式)为 <strong><span class='p red'>public static final</span></strong> （并且只能是 public，用 private 修饰会报编译错误）。<br>  且在 <strong><span class='p red'>声明时就得进行初始化</span></strong>。<br>  理解：由于接口是一种规则，而规则一般情况下是不变的，因此成员变量是常量。</li><li><strong>构造方法</strong><br>  由于接口无法实例化，也不需要给子类的成员变量赋值，因此接口中无构造方法。</li><li><p><strong>成员方法</strong><br>  默认修饰符(隐式)为 public abstract。只能为抽象方法，没有方法体—-即不能在接口中进行实现。</p><ul><li>JDK7以前接口中只能定义抽象方法</li><li><p>JDK8新特性：接口中可以定义有方法体的方法(默认方法和静态方法)，来解决接口升级问题。</p><ol><li><p>默认方法<br> 定义格式：在返回值类型前加修饰符default。<br> 如 public default 返回值类型 方法名 (参数列表) {};</p> <div class="note warning flat"><ul><li>默认方法不是抽象方法，不强制被重写。如果被重写，在实现类中不能加default。</li><li>public可省略，default不可省略。</li><li>一个类实现了多个接口，且这些接口中有同名的默认方法，则在类中必须重写该同名方法。</li></ul></div></li><li><p>静态方法<br> 定义格式：在返回值类型前加修饰符static。<br> 如 public static 返回值类型 方法名 (参数列表) {};</p> <div class="note warning flat"><ul><li>静态方法不能被重写。</li><li>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用。</li><li>public可省略，static不可省略。</li></ul></div></li></ol></li><li><p>JDK9新特性：接口中可以定义私有方法。</p><ol><li>私有方法<br> 为默认方法服务，如果为私有方法加上static修饰符则能为静态方法服务。<br> 格式1: private 返回值类型 方法名(参数列表) {}<br> 格式2: private static 返回值类型 方法名(参数列表) {}<br>即上面默认方法和静态方法可以调用私有方法。</li></ol></li></ul></li><li><p><strong>接口与接口之间的关系</strong><br>继承关系，可以单继承，也可以多继承。<br>如果实现类实现了最下面的子接口，那么就需要重写所有的抽象方法(子接口+父接口)。</p></li></ul><p>接口代表规则，是行为的抽象。想要让哪个类拥有一个行为，就让这个类实现对应的接口就可以了。<br>当一个方法的参数是接口时，可以传递接口所有实现类的对象，这种方式称之为接口多态。</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>当A类为B类服务时，为了不让外界直接访问到A类(或者A类单独存在没有意义)，可把这个A类定义在B类的内部，变为内部类。也就是在一个类中再定义一个类。</p><p>内部类可以分为:</p><ul><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li><strong><span class='p red'>匿名内部类</span></strong></li></ul><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>写在成员位置，属于外部类的成员。</p><ul><li>特点<ol><li>可以被修饰符修饰，如private，缺省/默认(default)，protected，public，static等。<br> 若用private修饰，则在外界无法创建内部类对象。</li><li>在成员内部类里面，JDK16之前不能定义静态变量，JDK 16开始才可以定义静态变量。</li></ol></li><li><strong>成员内部类基础代码</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>创建成员内部类的对象</strong><ol><li>直接创建(适用于内部类被 非private修饰时)<br> 先创建外部类对象再创建内部类对象。<div class="note flat"><p><strong><span class='p red'>外部类名.n内部类名 对象名 = new 外部类().new 内部类();</span></strong></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在外部类中编写方法，对外提供内部类的对象(适用内部类被 private修饰时)<br>方法的返回值类型为<span class='p red'>内部类</span>，返回创建的内部类对象的地址。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Outer.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">in</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在外部类中编写方法</span></span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//InnerClassDemo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//先新建外部类对象</span></span><br><span class="line">        <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        <span class="comment">//再调用方法创建内部类对象</span></span><br><span class="line">        o.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><strong>成员内部类获取外部类的成员</strong><div class="note info flat"><p><strong><span class='p red'>内部类有一个隐含的成员变量 final com.learning.innerclassdemo.Outer this$0;</span></strong><br>该成员变量为常量，类型为外部类Outer，名称为this$0,记录值为外部类对象的地址值。<br>在内部类中通过 <code>外部类名.this</code> 获取外部类对象的地址值。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> a=<span class="number">20</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> a=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">            System.out.println(a);<span class="comment">//30</span></span><br><span class="line">            System.out.println(<span class="built_in">this</span>.a);<span class="comment">//20</span></span><br><span class="line">            System.out.println(Outer.<span class="built_in">this</span>.a);<span class="comment">//10，即获取了外部类的成员变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>被static修饰的成员内部类称为静态内部类。即静态内部类为一种特殊的成员内部类。<br>静态内部类只能访问外部类中的静态变量和静态方法，如果想要访问非静态的需要创建外部类的对象。</p><ul><li>创建静态内部类对象<div class="note flat"><p><strong><span class='p red'>外部类名.n内部类名 对象名 = new 外部类.内部类();</span></strong><br>注意和创建成员内部类的区别，前者是 外部类().new 内部类();</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Outer.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;非静态方法被调用&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//System.out.println(a);报错,无法访问非静态变量</span></span><br><span class="line">            System.out.println(<span class="string">&quot;访问外部类中的静态变量b=&quot;</span> + b);<span class="comment">//只能访问静态变量</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果要访问非静态变量需要创建外部类对象</span></span><br><span class="line">            <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;访问外部类中的非静态变量a=&quot;</span> + o.a);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态方法被调用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//InnerClassDemo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建静态内部类对象</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.Inner();</span><br><span class="line">        oi.show1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>执行结果<div class="note success flat"><p>非静态方法被调用<br>访问外部类中的静态变量b=20<br>访问外部类中的非静态变量a=10</p></div></li><li>调用静态方法<div class="note flat"><p><strong><span class='p red'>外部类名.n内部类名.f方法名();</span></strong></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">//调用静态方法</span></span><br><span class="line">            Outer.Inner.show2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>定义在方法中的内部类称为局部内部类，类似于方法中的局部变量。</p><ul><li>外界无法直接使用，需要在方法内部创建对象并使用。</li><li>该类可以直接访问外部类的成员，也可以访问方法中的局部变量。</li><li>能修饰局部变量的修饰词(如final)也能够修饰局部内部类，其它的都不行(如static、public等等)。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Outer.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//      static int c = 30;无法在方法中定义静态局部变量</span></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">static</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类中的show1&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;访问方法中的局部变量aa=&quot;</span>+aa);</span><br><span class="line">                System.out.println(<span class="string">&quot;访问方法中的局部常量bb=&quot;</span>+bb);</span><br><span class="line">                System.out.println(<span class="string">&quot;访问外部类的私有成员变量a=&quot;</span>+Outer.<span class="built_in">this</span>.a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类中的静态show2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建局部内部类对象</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;访问局部内部类的成员变量a=&quot;</span>+i.a);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问局部内部类的成员常量b=&quot;</span>+i.b);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问局部内部类的静态成员变量c=&quot;</span>+i.c);</span><br><span class="line">        i.show1();</span><br><span class="line">        i.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//InnerClassDemo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"></span><br><span class="line">        o.show();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>执行结果<div class="note success flat"><p>访问局部内部类的成员变量a=1<br>访问局部内部类的成员常量b=2<br>访问局部内部类的静态成员变量c=3<br>局部内部类中的show1<br>访问方法中的局部变量aa=10<br>访问方法中的局部常量bb=20<br>访问外部类的私有成员变量a=111<br>局部内部类中的静态show2</p></div></li></ul><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>隐藏了名字的内部类，可以写在成员位置(即成员匿名内部类)，也可以写在局部位置(即局部匿名内部类)。</p><ul><li>格式<br>  包含了<ol><li>继承/实现➡即类名或接口名部分，代表继承的类或要实现的接口</li><li>方法重写</li><li>创建对象➡new<br>整体就是一个类的子类对象或者接口的实现类对象<div class="note flat"><p><span class='p blue'>new</span> 类名或接口名(){<br>    重写方法;<br>};<br>注意最后一行的分号。</p></div>例如<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Inner</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//重写show方法...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>使用场景  <div class="note info flat"><p>当方法的参数是接口或者类时，以接口为例，可以传递这个接口的实现类对象，如果实现类只要使用一次，就可以用匿名内部类简化代码。</p></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建待办清单(持续更新中)</title>
      <link href="/2022/12/09/0002_page/"/>
      <url>/2022/12/09/0002_page/</url>
      
        <content type="html"><![CDATA[<h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>加上leetcode图标</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>引入彩色图标</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>引入动态图标</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>深色模式适配</p>            </div><h2 id="首页文章图片"><a href="#首页文章图片" class="headerlink" title="首页文章图片"></a>首页文章图片</h2><div class='checkbox cyan'><input type="checkbox" />            <p>绘制个性化封面</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>应用封面</p>            </div><h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><div class='checkbox gray checked'><input type="checkbox" checked="checked"/>            <p>引入彩色图标</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>引入动态图标</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>深色模式适配</p>            </div>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }    /* 小冰分类分类磁铁黑夜模式适配 */  /* 一般状态 */  [data-theme="dark"] .magnet_link_context {  background: #1e1e1e;  color: antiquewhite;  }  /* 鼠标悬浮状态 */  [data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;  }    /* 翻页按钮居中 */  #pagination {  width: 100%;  margin: auto;  }    svg.icon {    width: 1.5em; height: 1.5em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    /* 文章页H1-H6图标样式效果 */  /* 控制风车转动速度 4s那里可以自己调节快慢 */  h1::before,  h2::before,  h3::before,  h4::before,  h5::before,  h6::before {    -webkit-animation: ccc 4s linear infinite;    animation: ccc 4s linear infinite;  }  /* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */  @-webkit-keyframes ccc {    0% {      -webkit-transform: rotate(0deg);      transform: rotate(0deg);    }    to {      -webkit-transform: rotate(-1turn);      transform: rotate(-1turn);    }  }  @keyframes ccc {    0% {      -webkit-transform: rotate(0deg);      transform: rotate(0deg);    }    to {      -webkit-transform: rotate(-1turn);      transform: rotate(-1turn);    }  }  /* 设置风车颜色 */  #content-inner.layout h1::before {    color: #ef50a8;    margin-left: -1.55rem;    font-size: 1.3rem;    margin-top: -0.23rem;  }  #content-inner.layout h2::before {    color: #fb7061;    margin-left: -1.35rem;    font-size: 1.1rem;    margin-top: -0.12rem;  }  #content-inner.layout h3::before {    color: #ffbf00;    margin-left: -1.22rem;    font-size: 0.95rem;    margin-top: -0.09rem;  }  #content-inner.layout h4::before {    color: #a9e000;    margin-left: -1.05rem;    font-size: 0.8rem;    margin-top: -0.09rem;  }  #content-inner.layout h5::before {    color: #57c850;    margin-left: -0.9rem;    font-size: 0.7rem;    margin-top: 0rem;  }  #content-inner.layout h6::before {    color: #5ec1e0;    margin-left: -0.9rem;    font-size: 0.66rem;    margin-top: 0rem;  }  /* s设置风车hover动效 6s那里可以自己调节快慢*/  #content-inner.layout h1:hover,  #content-inner.layout h2:hover,  #content-inner.layout h3:hover,  #content-inner.layout h4:hover,  #content-inner.layout h5:hover,  #content-inner.layout h6:hover {    color: var(--theme-color);  }  #content-inner.layout h1:hover::before,  #content-inner.layout h2:hover::before,  #content-inner.layout h3:hover::before,  #content-inner.layout h4:hover::before,  #content-inner.layout h5:hover::before,  #content-inner.layout h6:hover::before {    color: var(--theme-color);    -webkit-animation: ccc 6s linear infinite;    animation: ccc 6s linear infinite;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){    now.setTime(now.getTime()+1e3);    var e=new Date("12/08/2022 00:00:00"),    t=Math.trunc(234e8+(now-e)/1e3*17),    a=(t/1496e5).toFixed(6),    o=new Date("12/08/2022 00:00:00"),    r=(now-o)/1e3/60/60/24,    i=Math.floor(r),n=(now-o)/1e3/60/60-24*i,    s=Math.floor(n);1==String(s).length&&(s="0"+s);    var l=(now-o)/1e3/60-1440*i-60*s,g=Math.floor(l);    1==String(g).length&&(g="0"+g);    var d=(now-o)/1e3-86400*i-3600*s-60*g,b=Math.round(d);    1==String(b).length&&(b="0"+b);    let c="";    c=s<18&&s>=9?    `<img class='boardsign' src='https://img.shields.io/badge/%E5%B0%8F%E7%99%BD%E3%81%AE%E9%99%8B%E5%AE%A4-%E6%91%B8%E9%B1%BC%E4%B8%AD%F0%9F%90%9F-1ade23?style=social&logo=Babel' title='好好学习好好生活~'>        <br> 本站居然运行了 ${i} 天 ${s} 小时 ${g} 分 ${b} 秒             <i id="heartbeat" class='fas fa-heartbeat'></i>         <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀         <br> 再看看那个光点，它就在这里，这是家园，这是我们 —— 你所爱的每一个人，你认识的一个人，你听说过的每一个人，曾经有过的每一个人，都在它上面度过他们的一生✨ `:`    <img class='boardsign' src='https://img.shields.io/badge/%E5%B0%8F%E7%99%BD%E3%81%AE%E9%99%8B%E5%AE%A4-%E4%B8%8B%E7%8F%AD%E5%BC%80%E6%91%86~%F0%9F%8C%99-1ade23?style=social&logo=Babel' title='开摆咯~'>        <br> 本站居然运行了 ${i} 天 ${s} 小时 ${g} 分 ${b} 秒         <i id="heartbeat" class='fas fa-heartbeat'></i>         <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀         <br> 再看看那个光点，它就在这里，这是家园，这是我们 —— 你所爱的每一个人，你认识的一个人，你听说过的每一个人，曾经有过的每一个人，都在它上面度过他们的一生✨ `,        document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=c)}setInterval((()=>{createtime()}),1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
